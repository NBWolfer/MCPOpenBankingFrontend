import React, { useState } from 'react';
import './ChatBot.css';

interface Message {
  id: number;
  text: string;
  isBot: boolean;
  timestamp: string;
}

const ChatBot: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: "Merhaba! Ben MCP YatÄ±rÄ±m AsistanÄ±. Size nasÄ±l yardÄ±mcÄ± olabilirim?",
      isBot: true,
      timestamp: new Date().toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })
    }
  ]);
  const [input, setInput] = useState('');

  const generateResponse = (userMessage: string): string => {
    const lowercaseMessage = userMessage.toLowerCase();
    
    if (lowercaseMessage.includes('yatÄ±rÄ±m') || lowercaseMessage.includes('Ã¶neri')) {
      return 'Son dÃ¶nemde teknoloji ve finans sektÃ¶rÃ¼ hisseleri yÃ¼kseliÅŸ gÃ¶steriyor. THYAO ve GARAN Ã¶zellikle dikkat Ã§ekici bir performans sergiliyor. AyrÄ±ca altÄ±n ve dÃ¶viz yatÄ±rÄ±mÄ± da deÄŸerlendirilebilir.';
    }
    
    if (lowercaseMessage.includes('altÄ±n') || lowercaseMessage.includes('dÃ¶viz')) {
      return 'AltÄ±n ve dÃ¶viz gÃ¼venli liman olarak gÃ¶rÃ¼lÃ¼yor. Son 3 ayda altÄ±n %10, dolar ise %5 deÄŸer kazandÄ±.';
    }
    
    if (lowercaseMessage.includes('borsa') || lowercaseMessage.includes('hisse')) {
      return 'BIST-100 son bir ayda %8 yÃ¼kseldi. Ã–zellikle bankacÄ±lÄ±k ve havayolu ÅŸirketleri pozitif ayrÄ±ÅŸÄ±yor.';
    }
    
    if (lowercaseMessage.includes('risk')) {
      return 'YatÄ±rÄ±mlarÄ±nÄ±zÄ± Ã§eÅŸitlendirmenizi Ã¶neririm. PortfÃ¶yÃ¼nÃ¼zÃ¼ hisse senedi, altÄ±n, dÃ¶viz ve mevduat arasÄ±nda dengeli daÄŸÄ±tabilirsiniz.';
    }

    return 'BaÅŸka bir konuda yardÄ±mcÄ± olabilir miyim? YatÄ±rÄ±m Ã¶nerileri, piyasa analizi veya risk yÃ¶netimi hakkÄ±nda sorularÄ±nÄ±zÄ± yanÄ±tlayabilirim.';
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim()) return;

    // KullanÄ±cÄ± mesajÄ±nÄ± ekle
    const userMessage: Message = {
      id: messages.length + 1,
      text: input,
      isBot: false,
      timestamp: new Date().toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })
    };

    // Bot yanÄ±tÄ±nÄ± hazÄ±rla
    const botResponse: Message = {
      id: messages.length + 2,
      text: generateResponse(input),
      isBot: true,
      timestamp: new Date().toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })
    };

    setMessages([...messages, userMessage, botResponse]);
    setInput('');
  };

  return (
    <div className={`chatbot-container ${isOpen ? 'open' : ''}`}>
      <button 
        className="chatbot-toggle"
        onClick={() => setIsOpen(!isOpen)}
      >
        {isOpen ? 'âœ•' : 'ğŸ’¬'}
      </button>

      {isOpen && (
        <div className="chatbot-window">
          <div className="chatbot-header">
            <h4>MCP YatÄ±rÄ±m AsistanÄ±</h4>
          </div>
          
          <div className="messages-container">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`message ${message.isBot ? 'bot' : 'user'}`}
              >
                <div className="message-content">
                  {message.text}
                  <span className="message-timestamp">{message.timestamp}</span>
                </div>
              </div>
            ))}
          </div>

          <form onSubmit={handleSubmit} className="chatbot-input">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="MesajÄ±nÄ±zÄ± yazÄ±n..."
            />
            <button type="submit">
              GÃ¶nder
            </button>
          </form>
        </div>
      )}
    </div>
  );
};

export default ChatBot;
